[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "secure-code-analyzer"
version = "0.1.0"
description = "Production-ready static code analyzer for PHP and JavaScript security vulnerabilities"
authors = [
    {name = "Security Team", email = "security@company.com"},
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Security",
    "Topic :: Software Development :: Quality Assurance",
]
keywords = [
    "security", 
    "static-analysis", 
    "code-analysis", 
    "php", 
    "javascript", 
    "vulnerability-scanner"
]

dependencies = [
    "tree-sitter>=0.21.0",
    "tree-sitter-php>=0.23.0",
    "tree-sitter-javascript>=0.21.0",
    "pyyaml>=6.0",
    "click>=8.0",
    "rich>=13.0",
    "sarif-om>=1.0.4",
    "jsonschema>=4.0",
    "pathlib2>=2.3.0",
    "python-magic>=0.4.27",
    "gitpython>=3.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "pytest-mock>=3.10",
    "black>=23.0",
    "isort>=5.12",
    "flake8>=6.0",
    "mypy>=1.0",
    "pre-commit>=3.0",
]
docs = [
    "mkdocs>=1.5",
    "mkdocs-material>=9.0",
    "mkdocstrings[python]>=0.20",
]
testing = [
    "tox>=4.0",
    "coverage[toml]>=7.0",
]

[project.urls]
Homepage = "https://github.com/company/secure-code-analyzer"
Documentation = "https://secure-code-analyzer.readthedocs.io/"
Repository = "https://github.com/company/secure-code-analyzer.git"
"Bug Tracker" = "https://github.com/company/secure-code-analyzer/issues"

[project.scripts]
sca = "sca.cli:main"

# Flat layout configuration - NO src/ references
[tool.setuptools.packages.find]
include = ["sca*"]
exclude = ["tests*", "examples*"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\\.pyi?$'
extend-exclude = '''
/(
  # directories
  \\.eggs
  | \\.git
  | \\.hg
  | \\.mypy_cache
  | \\.tox
  | \\.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["sca"]
branch = true
omit = [
    "tests/*",
    "sca/__main__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
precision = 2
show_missing = true

[tool.coverage.html]
directory = "htmlcov"
