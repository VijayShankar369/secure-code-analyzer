name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: '3.11'
  
jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for diff scanning
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Lint with flake8
      run: |
        flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Check code formatting
      run: |
        black --check src/ tests/
        isort --check-only src/ tests/
    
    - name: Type checking with mypy
      run: mypy src/
    
    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --cov=src/sca --cov-report=xml --cov-report=term-missing
    
    - name: Run integration tests
      run: |
        pytest tests/integration/ -v
    
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    permissions:
      security-events: write
      contents: read
      pull-requests: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install SCA
      run: |
        python -m pip install --upgrade pip
        pip install -e .
    
    - name: Run self-scan (full)
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        sca scan . --json security-report.json --sarif security-report.sarif
      continue-on-error: true
    
    - name: Run PR diff scan
      if: github.event_name == 'pull_request'
      run: |
        sca scan . --diff-base origin/${{ github.base_ref }} \
          --json pr-security.json --sarif pr-security.sarif \
          --fail-on high
      continue-on-error: true
    
    - name: Upload SARIF to GitHub Security
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: ${{ github.event_name == 'pull_request' && 'pr-security.sarif' || 'security-report.sarif' }}
    
    - name: Comment PR with security results
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = 'pr-security.json';
          
          if (!fs.existsSync(path)) {
            console.log('No security report found');
            return;
          }
          
          const report = JSON.parse(fs.readFileSync(path, 'utf8'));
          const summary = report.summary;
          
          let comment = `## 🔒 Security Scan Results\n\n`;
          comment += `**Files Scanned:** ${summary.files_scanned}\n`;
          comment += `**Total Findings:** ${summary.total_findings}\n`;
          comment += `**Duration:** ${summary.duration_seconds}s\n\n`;
          
          comment += `**Severity Breakdown:**\n`;
          comment += `- Critical: ${summary.severity_counts.critical}\n`;
          comment += `- High: ${summary.severity_counts.high}\n`;
          comment += `- Medium: ${summary.severity_counts.medium}\n`;
          comment += `- Low: ${summary.severity_counts.low}\n\n`;
          
          if (summary.total_findings > 0) {
            comment += `**Top Issues:**\n`;
            report.findings.slice(0, 5).forEach(finding => {
              comment += `- **${finding.severity.toUpperCase()}**: ${finding.message} (${finding.file}:${finding.line})\n`;
            });
            
            if (report.findings.length > 5) {
              comment += `\n*... and ${report.findings.length - 5} more issues.*\n`;
            }
            
            comment += `\n❌ **This PR introduces security vulnerabilities. Please review and fix before merging.**`;
          } else {
            comment += `\n✅ **No security issues found in changed files.**`;
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
    
    - name: Archive security reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports-${{ github.run_number }}
        path: |
          *.json
          *.sarif
        retention-days: 30

  build-container:
    name: Build Container
    runs-on: ubuntu-latest
    needs: [lint-and-test, security-scan]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push container
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  performance-test:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
    
    - name: Generate test files
      run: |
        mkdir -p perf-test/{php,js}
        # Generate synthetic vulnerable PHP files
        for i in {1..100}; do
          cat > perf-test/php/test$i.php << 'EOF'
        <?php
        $id = $_GET['id'];
        $query = "SELECT * FROM users WHERE id = " . $id;
        mysql_query($query);
        
        $file = $_GET['file'];
        include($file);
        
        echo $_POST['message'];
        ?>
        EOF
        done
        
        # Generate synthetic vulnerable JS files
        for i in {1..100}; do
          cat > perf-test/js/test$i.js << 'EOF'
        const userInput = location.search;
        document.getElementById('content').innerHTML = userInput;
        eval(userCode);
        setTimeout(dynamicCode, 1000);
        EOF
        done
    
    - name: Run performance benchmark
      run: |
        echo "Starting performance benchmark..."
        time sca scan perf-test/ --json perf-report.json
        
        # Extract timing information
        scan_time=$(jq -r '.summary.duration_seconds' perf-report.json)
        files_scanned=$(jq -r '.summary.files_scanned' perf-report.json)
        
        echo "Performance Results:" >> $GITHUB_STEP_SUMMARY
        echo "- Files scanned: $files_scanned" >> $GITHUB_STEP_SUMMARY
        echo "- Total time: ${scan_time}s" >> $GITHUB_STEP_SUMMARY
        echo "- Files per second: $(echo "scale=2; $files_scanned / $scan_time" | bc)" >> $GITHUB_STEP_SUMMARY

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [lint-and-test, security-scan, build-container]
    if: github.event_name == 'release'
    
    permissions:
      contents: write
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: python -m build
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      run: twine upload dist/*
    
    - name: Upload release artifacts
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./dist/
        asset_name: sca-dist-${{ github.event.release.tag_name }}
        asset_content_type: application/zip